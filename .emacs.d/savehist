;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(input-method-history coding-system-history dired-shell-command-history read-expression-history buffer-name-history pdf-occur-history pdf-annot-color-history empty-history file-name-history minibuffer-history extended-command-history evil-ex-history))
(setq dired-shell-command-history '("xloadimage" "vim"))
(setq read-expression-history '("q"))
(setq buffer-name-history '("bin" "emacs-init.org" "*shell*" "*eshell*" "*Messages*" "*Completions*" "*scratch*" "*Help*" "*info*" "*shell*" "*info*" "kanta" "emacs-init.org" ".emacs.d" "/" "treeway.jpeg" "tree-736875.jpg" "*shell*" "*Messages*" "*scratch*" "Cracked - Season 1 Watch Online Free on Fmovies-5.mp4" "Krsna_Book.txt" "Die-schwarze-Kathedrale-by-Palliser_-Charles-_z-lib.org_.mobi" ".emacs.d" "content.opf (Agent Zero (An Agent Zero Spy Thriller—Book 1).epub)" "mimetype (Agent Zero (An Agent Zero Spy Thriller—Book 1).epub)" "Forty Words for Sorrow by Blunt, Giles (z-lib.org).mobi" "Krsna-Book.epub" "emacs-init.org" "emacs-init.org<2>" "Canto 1" "chapter1.doc" "chapter3.doc" "emacs.pdf"))
(setq pdf-occur-history '("q"))
(setq file-name-history '("~/" "~/.emacs.d/emacs-init.org" "~/`" "~/.emacs.d/emacs-init.org" "~/new" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/.emacs.d/" "~/.emacs.d/emacs-init.org" "~/" "~/bin/wallpapers/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/emc/.emacs.d/emacs-init.org" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/.emacs.d/init.el" "~/" "~/.emacs.d/init.el" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org"))
(setq minibuffer-history '("wallpapers" "/bin/bash" "eval-buffer" "all-the-icons-dired" "evil-collection" "dired-open" "dired-single" "ranger" "ereader" "nov"))
(setq extended-command-history '("dired" "term" "shell" "eshell" "nov-mode" "dired-hide-dotfiles-mode" "all-the-icons-dired-mode" "package-install" "dired-hide-dotfiles-mode" "dired-single-up-directory" "evil-collection-init" "package-install" "dired-async--modeline-mode" "dired-hide-dotfiles-mode" "package-install" "dired" "deer" "kill-buffer" "ranger" "package-install" "package-list-packages" "nov-mode" "dired" "package-list-packages" "package-install" "dired-up-directory" "nov-mode" "ereader-mode" "package-install" "nov-mode" "dired" "nov-mode" "package-install" "doc-view-presentation" "doc-view-mode" "evil-mode" "package-install" "pdf-tools-install" "dired" "pdf-tools-install" "dired" "pdf-tools-install" "pdf-occur" "dired" "pdf-occur" "dired" "pdf-occur"))
(setq evil-ex-history '(#("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("ba" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2))))
(setq evil-jumps-history '((32340 "/home/kanta/.emacs.d/emacs-init.org") (130 "/home/kanta/tether-USB.txt") (38020 "/home/kanta/.emacs.d/emacs-init.org") (36481 "/home/kanta/.emacs.d/emacs-init.org") (36480 "/home/kanta/.emacs.d/emacs-init.org") (717 "/home/kanta/gnupg/pubring.kbx") (28701 "/home/kanta/bin/Passports/ChangeOfPassportDeitails.pdf") (1 "/home/kanta/bin/Passports/ChangeOfPassportDeitails.pdf") (36480 "/home/kanta/.emacs.d/emacs-init.org") (31997 "/home/kanta/.emacs.d/emacs-init.org") (6455 "/home/kanta/.emacs.d/emacs-init.org")))
(setq buffer-name-history '("bin" "emacs-init.org" "*shell*" "*eshell*" "*Messages*" "*Completions*" "*scratch*" "*Help*" "*info*" "*shell*" "*info*" "kanta" "emacs-init.org" ".emacs.d" "/" "treeway.jpeg" "tree-736875.jpg" "*shell*" "*Messages*" "*scratch*" "Cracked - Season 1 Watch Online Free on Fmovies-5.mp4" "Krsna_Book.txt" "Die-schwarze-Kathedrale-by-Palliser_-Charles-_z-lib.org_.mobi" ".emacs.d" "content.opf (Agent Zero (An Agent Zero Spy Thriller—Book 1).epub)" "mimetype (Agent Zero (An Agent Zero Spy Thriller—Book 1).epub)" "Forty Words for Sorrow by Blunt, Giles (z-lib.org).mobi" "Krsna-Book.epub" "emacs-init.org" "emacs-init.org<2>" "Canto 1" "chapter1.doc" "chapter3.doc" "emacs.pdf"))
(setq compile-command '"make -k ")
(setq extended-command-history '("dired" "term" "shell" "eshell" "nov-mode" "dired-hide-dotfiles-mode" "all-the-icons-dired-mode" "package-install" "dired-hide-dotfiles-mode" "dired-single-up-directory" "evil-collection-init" "package-install" "dired-async--modeline-mode" "dired-hide-dotfiles-mode" "package-install" "dired" "deer" "kill-buffer" "ranger" "package-install" "package-list-packages" "nov-mode" "dired" "package-list-packages" "package-install" "dired-up-directory" "nov-mode" "ereader-mode" "package-install" "nov-mode" "dired" "nov-mode" "package-install" "doc-view-presentation" "doc-view-mode" "evil-mode" "package-install" "pdf-tools-install" "dired" "pdf-tools-install" "dired" "pdf-tools-install" "pdf-occur" "dired" "pdf-occur" "dired" "pdf-occur"))
(setq file-name-history '("~/" "~/.emacs.d/emacs-init.org" "~/`" "~/.emacs.d/emacs-init.org" "~/new" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/.emacs.d/" "~/.emacs.d/emacs-init.org" "~/" "~/bin/wallpapers/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/emc/.emacs.d/emacs-init.org" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/.emacs.d/init.el" "~/" "~/.emacs.d/init.el" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org" "~/" "~/.emacs.d/emacs-init.org"))
(setq kill-ring '(#(";; Chant and be happy!
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 23 (fontified t face font-lock-comment-face)) #(";" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) #(";" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) #(";" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) #(";" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) #(";" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) #(";" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) #(";" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) #(";" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) #(";" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block))) #("  :hook (dired-mode . all-the-icons-dired-mode))
" 0 2 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 2 7 (face (font-lock-builtin-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 7 48 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 48 49 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t))) #("(use-package all-the-icons-dired
" 0 1 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1 12 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 12 13 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 13 32 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 32 33 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t))) #("dd(use-package dired-single)
" 0 3 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 3 14 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 14 15 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 15 27 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 27 29 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t))) #(";" 0 1 (fontified t)) #("
(use-package dired-single)
" 0 2 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 13 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 13 14 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 14 26 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 26 28 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #("    \"h\" 'dired-single-up-directory
    \"l\" 'dired-single-buffer))
" 0 4 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 4 7 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 7 34 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 34 39 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 39 42 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 42 66 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #("  :config
  (evil-collection-define-key 'normal 'dired-mode-map
" 0 2 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 9 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 9 64 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #("  :bind ((\"C-x C-j\" . dired-jump))
  :custom ((dired-listing-switches \"-agho --group-directories-first\"))
" 0 2 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 7 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 7 10 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 10 19 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 19 34 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 34 37 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 37 44 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 44 70 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 70 103 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 103 106 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #("  :ensure nil
  :commands (dired dired-jump)
" 0 2 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 9 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 9 13 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 13 16 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 16 25 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 25 45 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #(" 
(use-package dired
" 0 3 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 3 14 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 14 15 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 15 20 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) help-echo nil src-block t) 20 21 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t)) #("H\" 'dired-hide-dotfiles-mode))" 0 2 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 2 30 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("   ;  (setq dired-omit-files                ; sets a regexp for which files to hide
" 0 3 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 3 6 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 6 84 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block))) #("                                (\"mkv\" . \"mpv\")
" 0 33 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 33 38 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 38 41 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 41 46 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 46 47 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 47 48 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t))) #(")))" 0 3 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #("                                (\"mkv\" . \"mpv\"))))
" 0 33 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 33 38 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 38 41 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 41 46 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 46 50 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 50 51 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t))) #("    \"l\" 'dired-single-buffer))
" 0 4 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 4 7 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 7 30 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 30 31 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t))) #("    \"h\" 'dired-single-up-directory
" 0 4 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 4 7 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 7 34 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 34 35 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t))) #("  (evil-collection-define-key 'normal 'dired-mode-map
" 0 53 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 53 54 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t))) #("  :config
" 0 2 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 2 9 (src-block t help-echo nil face (font-lock-builtin-face org-block) font-lock-multiline t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 9 10 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t))) "emacs-init.org" "" "rote /home/kanta/.emacs.d/emacs-init.el [48 times]
Tangled 48 code blocks from emacs-init.org
Loading /home/kanta/.emacs.d/emacs-init.el (source)...
Loading /home/kanta/.emacs.d/custom.el (source)...done
Loading /home/kanta/.emacs.d/emacs-init.el (source)...done
Loaded /home/kanta/.emacs.d/emacs-init.el
For information about GNU Emacs and the GNU system, type C-h C-a.
Omitting...
(Nothing to omit)
Omitting...
Omitted 42 lines.
Omitting...
(Nothing to omit)
Making window-configuration-change-hook buffer-local while locally let-bound!
Omitting...
Omitted 2 lines.
Omitting...
Omitted 2 lines.
Omitting...
(Nothing to omit)
File opened, exiting ranger
Omitting...
(Nothing to omit)
Reverting all buffers

Quit
user-error: Unknown command: ‘ba’
evil-record-macro: Invalid register
C-c k is undefined
Quit
Omitting...
(Nothing to omit)
Omitting...
Omitted 42 lines.
Omitting...
(Nothing to omit)
Making window-configuration-change-hook buffer-local while locally let-bound!
Omitting...
Omitted 2 lines.
Omitting...
Omitted 2 lines.
Omitting...
(Nothing to omit)
Omitting...
(Nothing to omit)
Omitting...
Omitted 2 lines.
Omitting...
Omitted 2 lines.
Omitting...
(Nothing to omit)
Omitting...
Omitted 2 lines.
Omitting...
Omitted 2 lines.
Omitting...
(Nothing to omit)
Omitting...
Omitted 2 lines.
Omitting...
Omitted 2 lines.
Omitting...
(Not" "Wrote /home/kanta/.emacs.d/emacs-init.el [48 times]
Tangled 48 code blocks from emacs-init.org
Loading /home/kanta/.emacs.d/emacs-init.el (source)...
Loading /home/kanta/.emacs.d/custom.el (source)...done
Loading /home/kanta/.emacs.d/emacs-init.el (source)...done
Loaded /home/kanta/.emacs.d/emacs-init.el
For information about GNU Emacs and the GNU system, type C-h C-a.
Omitting...
(Nothing to omit)
Omitting...
Omitted 42 lines.
Omitting...
(Nothing to omit)
Making window-configuration-change-hook buffer-local while locally let-bound!
Omitting...
Omitted 2 lines.
Omitting...
Omitted 2 lines.
Omitting...
(Nothing to omit)
File opened, exiting ranger
Omitting...
(Nothing to omit)
Reverting all buffers

Quit
user-error: Unknown command: ‘ba’
evil-record-macro: Invalid register
C-c k is undefined
Quit
Omitting...
(Nothing to omit)
Omitting...
Omitted 42 lines.
Omitting...
(Nothing to omit)
Making window-configuration-change-hook buffer-local while locally let-bound!
Omitting...
Omitted 2 lines.
Omitting...
Omitted 2 lines.
Omitting...
(Nothing to omit)
Omitting...
(Nothing to omit)
Omitting...
Omitted 2 lines.
Omitting...
Omitted 2 lines.
Omitting...
(Nothing to omit)
Omitting...
Omitted 2 lines.
Omitting...
Omitted 2 lines.
Omitting...
(Nothing to omit)
Omitting...
Omitted 2 lines.
Omitting...
Omitted 2 lines.
Omitting...
(Not" #(" (add-to-list 'default-frame-alist '(alpha . (97 . 97)))
" 0 56 (yank-handler (evil-yank-line-handler nil t) font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 56 57 (yank-handler (evil-yank-line-handler nil t) font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block))) #(" (set-frame-parameter (selected-frame) 'alpha '(97 . 97))
" 0 58 (yank-handler (evil-yank-line-handler nil t) font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block))) #("** Transparancy

#+BEGIN_SRC emacs-lisp
 (set-frame-parameter (selected-frame) 'alpha '(97 . 97))
 (add-to-list 'default-frame-alist '(alpha . (97 . 97)))
#+END_SRC

" 0 1 (yank-handler (evil-yank-line-handler nil t) fontified t face org-level-2) 1 3 (yank-handler (evil-yank-line-handler nil t) fontified t face org-level-2) 3 15 (yank-handler (evil-yank-line-handler nil t) fontified t face org-level-2) 15 17 (yank-handler (evil-yank-line-handler nil t) fontified t) 17 39 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 39 40 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 40 155 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 155 164 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 164 165 (yank-handler (evil-yank-line-handler nil t) fontified t face org-block-end-line) 165 166 (yank-handler (evil-yank-line-handler nil t) fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler nil t) fontified t)) #(" (add-to-list 'default-frame-alist '(alpha . (97 . 97)))
" 0 56 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 56 57 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #(" (set-frame-parameter (selected-frame) 'alpha '(97 . 97))
" 0 15 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 15 58 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("** Transparancy

#+BEGIN_SRC emacs-lisp
 (set-frame-parameter (selected-frame) 'alpha '(97 . 97))
 (add-to-list 'default-frame-alist '(alpha . (97 . 97)))
#+END_SRC

" 0 1 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 1 3 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 3 15 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 15 17 (fontified t yank-handler (evil-yank-line-handler nil t)) 17 39 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 39 40 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 40 55 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 55 155 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 155 164 (face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 164 165 (face org-block-end-line fontified t yank-handler (evil-yank-line-handler nil t)) 165 166 (fontified t yank-handler (evil-yank-line-handler nil t))) #("
" 0 1 (fontified t yank-handler (evil-yank-line-handler nil t))) #("
" 0 1 (rear-nonsticky t fontified t yank-handler (evil-yank-line-handler nil t))) #("* Directory, buffer, window management
** Dired (directory editor, file manager)

The directory editor abbreviated as \"Dired\" (which I pronounce like
\"tired\", \"mired\", etc.) is a built-in tool that performs file management
operations inside of an Emacs buffer.  It is simply superb!  I use it
daily for a number of tasks.

You can interactively copy, move (rename), symlink, delete files and
directories, handle permissions, compress or extract archives, run shell
commands, combine Dired with regular editing capabilities as part of a
keyboard macro, search[+replace] across multiple files, encrypt/decrypt
files, and more.  Combine that with the possibility of matching items
with regular expressions or creating an editable Dired buffer and you
have everything you need to maximise your productivity.

Check some of my videos:

+ [[https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/][Dired tweaks and refinements]] (2019-08-12).
+ [[https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/][Use Dired and keyboard macros]] (2019-09-03).
+ [[https://protesilaos.com/codelog/2019-09-19-dired-narrow/][Techniques to narrow Dired]] (2019-09-19).
+ [[https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/][Change multi-file permissions with Dired]] (2019-11-16).
+ [[https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/][Music management with Dired and Bongo]] (2019-11-13).
+ [[https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/][Dired+Bongo and macros to handle music playlists]] (2019-11-18).
+ [[https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/][Search and replace across multiple files (not Dired-specific)]] (2019-12-08).

*** Base settings for Dired
   :PROPERTIES:
   :CUSTOM_ID: h:751a310d-c63e-461c-a6e1-dfdfdb01cb92
   :END:

The options here are meant to do the following:

+ Copy and delete recursively.  Do not ask about it.
+ Search only file names while point is there, else the rest (useful
  when using the detailed view).
+ Deletion sends items to the system's Trash, making it safer than the
  standard =rm=.
+ Prettify output.  Sort directories first.  Show dotfiles first.  Omit
  implicit directories (the single and double dots).  Use human-readable
  size units.  There are also options for tweaking the behaviour of
  =find-name-dired=, in the same spirit.  To learn everything about
  these switches, you need to read the manpage of =ls=.  You can do it
  with =M-x man RET ls=.
+ Hide all the verbose details by default (permissions, size, etc.).
  These can easily be toggled on using the left parenthesis =(= inside a
  dired buffer.  Also enable highlighting of the current line, which
  makes it even easier to spot the current item (I do not enable this
  globally, because I only want it for per-line interfaces, such as
  Dired's, but not for per-character ones, such as text editing).
+ While having two dired buffers side-by-side, the rename and copy
  operations of one are easily propagated to the other.  Dired is smart
  about your intentions and uses the adjacent Dired buffer's path as a
  prefix when performing such actions.
+ For Emacs 27.1, Dired can automatically create destination directories
  for its copy and remove operations.  So you can, for example, rename
  =file= to =/non-existent-path/file= and you will get what you want right
  away.
+ For Emacs 27.1, renaming a file of a version-controlled repository
  (git) will be done using the appropriate VC mechanism.
+ Let the relevant =find= commands use case-insensitive names.
+ Enable asynchronous mode.  This is subject to change, as I need to
  test it a bit more.

Note that =dired-listing-switches= and =find-ls-option= are configured to
show hidden directories and files /before/ their non-hidden counterparts.
If you want to reverse this order, you must append the =-X= option (such
as =-AFXhlv --group-directories-first=).

The commands with the =contrib/= prefix in =dired-aux= are copied from the
[[https://github.com/oantolin/emacs-config][Emacs configurations of Omar Antolín Camarena]].  They let you insert the
path of a bookmarked directory while performing an action such as
copying and renaming/moving a file.  While my =prot/dired-fd-*= are
conceptually similar to functions in [[#h:7862f39e-aed0-4d02-9f1e-60c4601a9734][projects and directory trees]] as
well as the ones in [[#h:06290f9c-491c-45b2-b213-0248f890c83d][the Ibuffer section]].

#+begin_src emacs-lisp
(use-package dired
  :config
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)
  (setq dired-listing-switches
        \"-AGFhlv --group-directories-first --time-style=long-iso\")
  (setq dired-dwim-target t)
  ;; Note that the the syntax for `use-package' hooks is controlled by
  ;; the `use-package-hook-name-suffix' variable.  The \"-hook\" suffix is
  ;; not an error of mine.
  :hook ((dired-mode-hook . dired-hide-details-mode)
         (dired-mode-hook . hl-line-mode)))

(use-package dired-aux
  :config
  (setq dired-isearch-filenames 'dwim)
  ;; The following variables were introduced in Emacs 27.1
  (setq dired-create-destination-dirs 'ask)
  (setq dired-vc-rename-file t)

  ;; TODO defmacro to avoid duplication of code in `fd' functions
  ;; TODO how can a defmacro produce named functions that are then
  ;; mapped to keys?
  (defun prot/dired-fd-dirs (&optional arg)
    \"Search for directories in VC root or PWD.
With \\\\[universal-argument] put the results in a `dired' buffer.
This relies on the external 'fd' executable.\"
    (interactive \"P\")
    (let* ((vc (vc-root-dir))
           (dir (expand-file-name (if vc vc default-directory)))
           (regexp (read-regexp
                    (concat \"Subdirectories matching REGEXP in \"
                            (propertize dir 'face 'bold)
                            \": \")))
           (names (process-lines \"fd\" \"-i\" \"-H\" \"-a\" \"-t\" \"d\" \"-c\" \"never\" regexp dir))
           (buf \"*FD Dired*\"))
      (if names
          (if arg
              (dired (cons (generate-new-buffer-name buf) names))
            (icomplete-vertical-do ()
              (find-file
               (completing-read (concat
                                 \"Files or directories matching \"
                                 (propertize regexp 'face 'success)
                                 (format \" (%s)\" (length names))
                                 \": \")
                                names nil t)))))
      (user-error (concat \"No matches for \" \"«\" regexp \"»\" \" in \" dir))))

  (defun prot/dired-fd-files-and-dirs (&optional arg)
    \"Search for files and directories in VC root or PWD.
With \\\\[universal-argument] put the results in a `dired' buffer.
This relies on the external 'fd' executable.\"
    (interactive \"P\")
    (let* ((vc (vc-root-dir))
           (dir (expand-file-name (if vc vc default-directory)))
           (regexp (read-regexp
                    (concat \"Files and dirs matching REGEXP in \"
                            (propertize dir 'face 'bold)
                            \": \")))
           (names (process-lines \"fd\" \"-i\" \"-H\" \"-a\" \"-t\" \"d\" \"-t\" \"f\" \"-c\" \"never\" regexp dir))
           (buf \"*FD Dired*\"))
      (if names
          (if arg
              (dired (cons (generate-new-buffer-name buf) names))
            (icomplete-vertical-do ()
              (find-file
               (completing-read (concat
                                 \"Files and directories matching \"
                                 (propertize regexp 'face 'success)
                                 (format \" (%s)\" (length names))
                                 \": \")
                                names nil t)))))
      (user-error (concat \"No matches for \" \"«\" regexp \"»\" \" in \" dir))))

  (defun contrib/cdb--bookmarked-directories ()
    (bookmark-maybe-load-default-file)
    (cl-loop for (name . props) in bookmark-alist
             for fn = (cdr (assq 'filename props))
             when (and fn (string-suffix-p \"/\" fn))
             collect (cons name fn)))

  (defun contrib/cd-bookmark (bm)
    \"Insert the path of a bookmarked directory.\"
    (interactive
     (list (let ((enable-recursive-minibuffers t))
             (completing-read
              \"Directory: \" (contrib/cdb--bookmarked-directories) nil t))))
    (when (minibufferp)
      (delete-region (minibuffer-prompt-end) (point-max)))
    (insert (cdr (assoc bm (contrib/cdb--bookmarked-directories)))))
  :bind ((\"M-s d\" .  prot/dired-fd-dirs)
         (\"M-s z\" . prot/dired-fd-files-and-dirs)
         :map dired-mode-map
         (\"C-+\" . dired-create-empty-file)
         (\"M-s f\" . nil)
         :map minibuffer-local-filename-completion-map
         (\"C-c d\" . contrib/cd-bookmark)))

(use-package find-dired
  :after dired
  :config
  (setq find-ls-option
        '(\"-ls\" . \"-AGFhlv --group-directories-first --time-style=long-iso\"))
  (setq find-name-arg \"-iname\"))

(use-package async :ensure)

(use-package dired-async
  :after (dired async)
  :hook (dired-mode-hook . dired-async-mode))
#+end_src

*Pro tip* while renaming or copying a file, =M-n= will return its original
name, thus allowing you to easily {pre,ap}pend to it.  This leverages an
intriguing concept of Emacs' design called \"future history\" (because =M-p=
goes back to your previous entries).  The notion of the future history,
when applied, is basically an educated guess of what the user would want
to do in the current context, given that they are not searching through
their previous actions.

**** TODO extend core Dired [1/3]
     :PROPERTIES:
     :CUSTOM_ID: h:f351058c-ea25-4ec3-88ce-2df6757fc193
     :END:
***** DONE front-end for `fd' executable
      CLOSED: [2020-05-30 Sat 20:17]
      :PROPERTIES:
      :CUSTOM_ID: h:00db9952-8a32-4142-8f62-dc275481e5a6
      :END:
***** TODO better handling of `xdg-open'
      :PROPERTIES:
      :CUSTOM_ID: h:b622cd06-14e6-4bdf-8730-b1a659591d4a
      :END:
***** TODO combine arbitrary dirs with selection
      :PROPERTIES:
      :CUSTOM_ID: h:bac59cd7-af79-43f5-89e4-520080817a61
      :END:
*** Narrowed dired
    :PROPERTIES:
    :CUSTOM_ID: h:affb6142-6216-43b6-9d66-e7b18d65e79e
    :END:

The standard way to produce a Dired buffer with only a handful of files
is to mark them, either manually or with =% m=, then toggle the mark with
=t=, and then remove (just from the view) everything with =k=.  This will
leave you with only the files you need to focus on.  With =g= you get back
to the unfiltered listing.

For dynamic filtering, use this package.  It offers several commands,
but I find that I only ever need to narrow by a regular expression
(check the source code for all of them =M-x find-library dired-narrow=).

#+begin_src emacs-lisp
(use-package dired-narrow
  :ensure
  :after dired
  :config
  (setq dired-narrow-exit-when-one-left t)
  (setq dired-narrow-enable-blinking t)
  (setq dired-narrow-blink-time 0.3)
  :bind (:map dired-mode-map
         (\"/\" . dired-narrow-regexp)))
#+end_src

*** wdired (writable dired)
    :PROPERTIES:
    :CUSTOM_ID: h:ab318722-fe96-4044-8811-f04f2ed74c06
    :END:

This is the editable state of a dired buffer.  You can access it with
=C-x C-q=.  Write changes to files or directories, as if it were a
regular buffer, then confirm them with =C-c C-c=.

+ While in writable state, allow the changing of permissions.
+ While renaming a file, any forward slash is treated like a directory
  and *is created directly* upon successful exit.

#+begin_src emacs-lisp
(use-package wdired
  :after dired
  :commands wdired-change-to-wdired-mode
  :config
  (setq wdired-allow-to-change-permissions t)
  (setq wdired-create-parent-directories t))
#+end_src

*** peep-dired (file previews including images)
    :PROPERTIES:
    :CUSTOM_ID: h:a90fb337-3cce-438a-a209-82b7eb42605f
    :END:

By default, dired does not show previews of files, while =image-dired=
is intended for a different purpose.  We just want to toggle the
behaviour while inside a regular dired buffer.

#+begin_src emacs-lisp
(use-package peep-dired
  :ensure
  :after dired
  :config
  (setq peep-dired-cleanup-on-disable t)
  (setq peep-dired-enable-on-directories nil)
  (setq peep-dired-ignored-extensions
        '(\"mkv\" \"webm\" \"mp4\" \"mp3\" \"ogg\" \"iso\"))
  :bind (:map dired-mode-map
              (\"P\" . peep-dired)))
#+end_src

*** image-dired (image thumbnails and previews)
    :PROPERTIES:
    :CUSTOM_ID: h:30e647cb-aee5-45d9-93b4-dc4e855fd0a6
    :END:

This tool offers facilities for generating thumbnails out of a selection
of images and displaying them in a separate buffer.  An external program
is needed for converting the images into thumbnails: =imagemagick=.  Other
useful external packages are =optipng= and =sxiv=.  The former is for
operating on PNG files, while the latter is a lightweight image viewer.

I feel this process is a bit cumbersome and can be very slow if you try
to generate lots of images at once.  The culprit is the image converter.

#+begin_src emacs-lisp
(use-package image-dired
  :config
  (setq image-dired-external-viewer \"xdg-open\")
  (setq image-dired-thumb-size 80)
  (setq image-dired-thumb-margin 2)
  (setq image-dired-thumb-relief 0)
  (setq image-dired-thumbs-per-row 4)
  :bind (:map image-dired-thumbnail-mode-map
              (\"<return>\" . image-dired-thumbnail-display-external)))
#+end_src

*** dired-subtree (tree-style view/navigation)
    :PROPERTIES:
    :CUSTOM_ID: h:6f25c4c1-c504-44e8-8fe5-280d780f0897
    :END:

Tree-style navigation means that the subdirectories of the current Dired
buffer can be expanded and contracted in place.  It then is possible to
perform the same kind of folding on their subdirectories, and so on.

This is, in my opinion, a far more intuitive interaction than the
default way of inserting subdirectories in the current buffer below
their parent (type =i= over the target dir).  There still are uses for
that technique, but tree-style navigation is easier for day-to-day
tasks.

What I have here:

+ The tab key will expand or contract the subdirectory at point.
+ =C-TAB= will behave just like org-mode handles its headings: hit it
  once to expand a subdir at point, twice to do it recursively, thrice
  to contract the tree.
+ I also have Shift-TAB for contracting the subtree /when the point is
  inside of it/.

#+begin_src emacs-lisp
(use-package dired-subtree
  :ensure
  :after dired
  :config
  (setq dired-subtree-use-backgrounds nil)
  :bind (:map dired-mode-map
              (\"<tab>\" . dired-subtree-toggle)
              (\"<C-tab>\" . dired-subtree-cycle)
              (\"<S-iso-lefttab>\" . dired-subtree-remove)))
#+end_src

*** dired-x (extra Dired functions)
    :PROPERTIES:
    :CUSTOM_ID: h:56cbacd7-1fe6-447c-a77f-645edbaa3c6c
    :END:

These are some additional features that are shipped with Emacs.  The one
I need the most is =dired-jump= and its \"other window\" variant.  These are
among my favourite commands.  They will always take you to the directory
that contains the current buffer.

'Jumping' works even when you are inside buffers that do not visit
files, such as Magit, Diff, or Eshell.  This is its most valuable
quality!  Edit a file then proceed to do some file management, then
invoke =previous-buffer= or =winner-undo= to go back to where you were (I
have a few key bindings for those in the [[#h:12591f89-eeea-4b12-93e8-9293504e5a12][Window configuration section]]).
Everything happens naturally.  Emacs' interconnectedness at its best!

I keep =dired-clean-confirm-killing-deleted-buffers= to =t= as a safety
mechanism: if a file is ever deleted by accident I can use its buffer to
restore it (never happened in practice).

With regard to binding keys, I choose to handle things myself.  There
has never been a case where I had to run =info= or =man= inside of a
directory listing and wished there was some keyboard shortcut readily
available.

While in =dired-mode=, if you need to open all marked files at once, you
can hit =F=.  It calls =dired-do-find-marked-files=.

#+begin_src emacs-lisp
(use-package dired-x
  :after dired
  :config
  (setq dired-clean-up-buffers-too t)
  (setq dired-clean-confirm-killing-deleted-buffers t)
  (setq dired-x-hands-off-my-keys t)
  (setq dired-bind-man nil)
  (setq dired-bind-info nil)

  (defun prot/dired-jump-extra (&optional arg)
    \"Switch directories comprising context and bookmarks.
NEEDS REVIEW.\"
    (interactive \"P\")
    (let* ((vc (vc-root-dir))
           (buf-name (buffer-file-name))
           (path (if buf-name
                     buf-name
                   default-directory))
           (file (abbreviate-file-name path))
           (bookmarks (mapcar (lambda (b)
                                (cdr b))
                              (contrib/cdb--bookmarked-directories)))
           (collection (append bookmarks
                             (list (file-name-directory file)
                                   (when vc vc))))
           (files (cl-remove-if (lambda (f)
                                  (eq f nil))
                                collection)))
      (icomplete-vertical-do ()
        (dired
         (completing-read \"Jump to context or bookmark: \" files nil t)))))

  :bind ((\"C-c j\" . prot/dired-jump-extra)
         (\"C-x C-j\" . dired-jump)
         (\"s-j\" . dired-jump)
         (\"C-x 4 C-j\" . dired-jump-other-window)
         (\"s-J\" . dired-jump-other-window)))
#+end_src

*** diredfl (more dired colours)
    :PROPERTIES:
    :CUSTOM_ID: h:26ddf3cb-60f0-4e06-8c03-523fc092b8e8
    :END:

This package defines a few more colours for Dired, especially while in
the detailed view.  My themes support it, as well as a ton of other
packages (see the [[#h:b7444e76-75d4-4ae6-a9d6-96ff9408efe6][section on my Modus themes]]).

#+begin_src emacs-lisp
(use-package diredfl
  :ensure
  :hook (dired-mode-hook . diredfl-mode))
#+end_src

*** dired-like view for the trash directory
    :PROPERTIES:
    :CUSTOM_ID: h:954adfb4-8f2c-4665-bb5b-e098926341b0
    :END:

=trashed= applies the principles of =dired= to the management of the user's
filesystem trash.  Use =C-h m= to see the docs and keybindings for its
major mode.

Basically, its interaction model is as follows:

- =m= to mark for some deferred action, such as =D= to delete, =R= to restore.
- =t= to toggle the status of all items as marked.  Use this without marks
  to =m= (mark) all items, then call a deferred action to operate on them.
- =d= to mark for permanent deletion.
- =r= to mark for restoration.
- =x= to execute these special marks.

#+begin_src emacs-lisp
(use-package trashed
  :ensure
  :config
  (setq trashed-action-confirmer 'y-or-n-p)
  (setq trashed-use-header-line t)
  (setq trashed-sort-key '(\"Date deleted\" . t))
  (setq trashed-date-format \"%Y-%m-%d %H:%M:%S\"))
#+end_src

** Working with buffers

*** Unique names for buffers
    :PROPERTIES:
    :CUSTOM_ID: h:60a70340-49dc-4f45-b147-12a4141db42b
    :END:

These settings make it easier to work with multiple buffers.  When two
buffers have the same name, Emacs will try to disambiguate them by
displaying their unique path inside angled brackets.  With the addition
of =uniquify-strip-common-suffix= it will also remove the part of the
file system path they have in common.

All such operations are reversed once an offending buffer is removed
from the list, allowing Emacs to revert to the standard of displaying
only the buffer's name.

#+begin_src emacs-lisp
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
  (setq uniquify-strip-common-suffix t)
  (setq uniquify-after-kill-buffer-p t))
#+end_src

**** TODO make uniquify better for Help, Info buffers
     :PROPERTIES:
     :CUSTOM_ID: h:d715be45-2a02-4202-80ea-5df4fd2056fa
     :END:
*** Ibuffer and extras (dired-like buffer list manager)
    :PROPERTIES:
    :CUSTOM_ID: h:06290f9c-491c-45b2-b213-0248f890c83d
    :END:

=ibuffer= is a built-in replacement for =list-buffers= that allows for
fine-grained control over the buffer list.  For this reason I bind it to
=C-x C-b=.

Overview of its features:

- mark and delete buffers same way you do in =dired= (see the previous
  sections on [[#h:c519300f-8a9a-472b-b26d-c2f49adbdb5d][dired (directory editor, file manager)]]);
- mark by a predicate, such as name, major mode, etc.;
- sort buffers by name, filesystem path, major mode, size;
- run =occur= on the marked buffers (remember: Occur produces a buffer
  that you can edit once you enable the editable state with =e=);
- run =query-replace= on marked buffers or its regular-expression-aware
  equivalent.

Run the universal help command for major mode documentation (=C-h m=)
while inside =ibuffer= to get a detailed list of all available commands
and their key bindings.

With regard to the following package declaration, these are my tweaks to
the default behaviour and presentation:

+ Prompt for confirmation only when deleting a modified buffer.
+ Hide the summary.
+ Do not open on the other window (not focused window).
+ Do not show empty filter groups.
+ Do not cycle movements.  So do not go to the top when moving downward
  at the last item on the list.

Also watch my [[https://protesilaos.com/codelog/2020-04-02-emacs-intro-ibuffer/][introduction to Ibuffer]] (2020-04-02).

Now some extras after I published that video: =prot/buffers-major-mode=
and =prot/buffers-vc-root= will produce a filtered list based on the
current buffer's major mode or root version-control directory
respectively.  Their standard mode of interaction is through minibuffer
completions (see [[#h:07e173ea-e7ed-4fc0-ba3c-e44b403359a7][Minibuffer essentials and Icomplete]]).  With a prefix
argument =C-u= they switch to a dedicated Ibuffer view instead.

For those two I received help from Omar Antolín Camarena with regard to
the use of =read-buffer= and the =lambda= passed to it: my prototype was
using the generic =completing-read= with =cl-remove-if-not= for filtering
the list of candidates (all possible errors are my own).  The upside of
using Omar's approach is that it informs other tools that this kind of
completion concerns buffers, so they can adapt accordingly.  This is
done, for example, by Omar's powerful =embark= package (see section on
[[#h:e97988bc-fd77-4dca-b74a-0897087624bd][Embark (actions for completion candidates)]]).

I consider these two commands to be conceptually related to what I have
defined in [[#h:7862f39e-aed0-4d02-9f1e-60c4601a9734][Completion for projects and directory trees]].  The key chords
follow the same pattern, with the =M-s= prefix being considered an entry
point for \"advanced search\" methods, inspired by the default for =occur=
(=M-s o=) as well as a few others.

#+begin_src emacs-lisp
(use-package ibuffer
  :config
  (setq ibuffer-expert t)
  (setq ibuffer-display-summary nil)
  (setq ibuffer-use-other-window nil)
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-movement-cycle nil)
  (setq ibuffer-default-sorting-mode 'filename/process)
  (setq ibuffer-use-header-line t)
  (setq ibuffer-default-shrink-to-minimum-size nil)
  (setq ibuffer-formats
        '((mark modified read-only locked \" \"
                (name 30 30 :left :elide)
                \" \"
                (size 9 -1 :right)
                \" \"
                (mode 16 16 :left :elide)
                \" \" filename-and-process)
          (mark \" \"
                (name 16 -1)
                \" \" filename)))
  (setq ibuffer-saved-filter-groups nil)

  (defun prot/buffers-major-mode (&optional arg)
    \"Select buffers that match the current buffer's major mode.
With \\\\[universal-argument] produce an `ibuffer' filtered
accordingly.  Else use standard completion.\"
    (interactive \"P\")
    (let* ((major major-mode)
           (prompt \"Buffers for \")
           (mode-string (format \"%s\" major))
           (mode-string-pretty (propertize mode-string 'face 'success)))
      (if arg
          (ibuffer t (concat \"*\" prompt mode-string \"*\")
                   (list (cons 'used-mode major)))
        (switch-to-buffer
         (read-buffer
          (concat prompt mode-string-pretty \": \") nil t
          (lambda (pair) ; pair is (name-string . buffer-object)
            (with-current-buffer (cdr pair) (derived-mode-p major))))))))

  (defun prot/buffers-vc-root (&optional arg)
    \"Select buffers that match the present `vc-root-dir'.
With \\\\[universal-argument] produce an `ibuffer' filtered
accordingly.  Else use standard completion.

When no VC root is available, use standard `switch-to-buffer'.\"
    (interactive \"P\")
    (let* ((root (vc-root-dir))
           (prompt \"Buffers for VC \")
           (vc-string (format \"%s\" root))
           (vc-string-pretty (propertize vc-string 'face 'success)))
      (if root
          (if arg
              (ibuffer t (concat \"*\" prompt vc-string \"*\")
                       (list (cons 'filename (expand-file-name root))))
            (switch-to-buffer
             (read-buffer
              (concat prompt vc-string-pretty \": \") nil t
              (lambda (pair) ; pair is (name-string . buffer-object)
                (with-current-buffer (cdr pair) (string= (vc-root-dir) root))))))
        (call-interactively 'switch-to-buffer))))

  :hook (ibuffer-mode-hook . hl-line-mode)
  :bind ((\"M-s b\" . prot/buffers-major-mode)
         (\"M-s v\" . prot/buffers-vc-root)
         (\"C-x C-b\" . ibuffer)
         :map ibuffer-mode-map
         (\"* f\" . ibuffer-mark-by-file-name-regexp)
         (\"* g\" . ibuffer-mark-by-content-regexp) ; \"g\" is for \"grep\"
         (\"* n\" . ibuffer-mark-by-name-regexp)
         (\"s n\" . ibuffer-do-sort-by-alphabetic)  ; \"sort name\" mnemonic
         (\"/ g\" . ibuffer-filter-by-content)))
#+end_src

**** Ibuffer integration with VC (version control framework)
     :PROPERTIES:
     :CUSTOM_ID: h:fcb95193-4049-4ae3-92ae-13176606e165
     :END:

This package offers a few functions for operating on =ibuffer= items based
on their corresponding version control data.

To me the most common case is to establish filter groups on a
per-project basis with =ibuffer-vc-set-filter-groups-by-vc-root=.  This
makes it easier to get an overview of where each buffer belongs,
especially in cases where you have similar looking names.

In terms of functionality, filter groups allow for per-group actions:

+ Move between group headings with =M-n= and =M-p=.
+ Toggle the visibility of the group with =RET=, while the point is over
  the heading.
+ With point over a heading, =m= will mark all its buffers, while =d= will
  mark them for deletion (confirm the latter with =x=, same as with
  =dired=).

The above granted, I prefer to create such filter groups manually via a
convenient key binding, rather than calling the function through a
relevant hook.

Make sure to also read the section on [[#h:0e2fe4c7-9d4b-4570-a293-9a9629021ff7][version control tools]].

#+begin_src emacs-lisp
(use-package ibuffer-vc
  :ensure
  :after (ibuffer vc)
  :bind (:map ibuffer-mode-map
              (\"/ V\" . ibuffer-vc-set-filter-groups-by-vc-root)
              (\"/ <deletechar>\" . ibuffer-clear-filter-groups)))
#+end_src

*** Scratch buffers per-major-mode
    :PROPERTIES:
    :CUSTOM_ID: h:2695bfa4-89b4-4d7f-aa6e-8ef42f9177aa
    :END:

This package will produce a buffer that matches the major mode of the
one you are currently in.  Use it with =M-x scratch=.  Doing that with a
prefix argument (=C-u=) will prompt for a major mode instead.  Simple yet
super effective!

The =prot/scratch-buffer-setup= simply adds some text in the buffer and
renames it appropriately for the sake of easier discovery.

#+begin_src emacs-lisp
(use-package scratch
  :ensure
  :config
  (defun prot/scratch-buffer-setup ()
    \"Add contents to `scratch' buffer and name it accordingly.\"
    (let* ((mode (format \"%s\" major-mode))
           (string (concat \"Scratch buffer for: \" mode \"\\n\\n\")))
      (when scratch-buffer
        (save-excursion
          (insert string)
          (goto-char (point-min))
          (comment-region (point-at-bol) (point-at-eol)))
        (next-line 2))
      (rename-buffer (concat \"*Scratch for \" mode \"*\") t)))
  :hook (scratch-create-buffer-hook . prot/scratch-buffer-setup)
  :bind (\"C-c s\" . scratch))
#+end_src

** Window configuration

I believe that Emacs' true power lies in its buffer management rather
than its multiplexing.  The latter becomes inefficient at scale, since
it tries to emulate the limitations of the real world, namely, the
placement of things on a desk.

By leveraging the power of the computer, we can use search methods to
easily reach any item.  There is no need to remain confined to the idea
of a finite space (screen real estate) that needs to be carefully
managed.

That granted, Emacs' multiplexing can be turned into a powerhouse as
well, covering everything from window placement rules, to the recording
of history and layouts, as well as directional or direct window
navigation.

The =prot/window-single-toggle= is based on [[https://gitlab.com/ambrevar/emacs-windower/-/blob/master/windower.el][Pierre Neidhardt's windower]].

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defvar prot/window-configuration nil
    \"Current window configuration.
Intended for use by `prot/window-monocle'.\")

  (defun prot/window-single-toggle ()
    \"Toggle between multiple windows and single window.
This is the equivalent of maximising a window.  Tiling window
managers such as DWM, BSPWM refer to this state as 'monocle'.\"
    (interactive)
    (if (one-window-p)
        (when prot/window-configuration
          (set-window-configuration prot/window-configuration))
      (setq prot/window-configuration (current-window-configuration))
      (delete-other-windows)))
  :bind (\"s-m\" . prot/window-single-toggle))
#+end_src

*** Window rules and basic tweaks

The =display-buffer-alist= and all other functions grouped together with
=prot/window-dired-vc-root-left= are considered *experimental and subject
to review*.  The former is intended as a rule-set for controlling the
display of windows.  While the latter serves as a series of tangible
examples of passing certain rules programmatically, in combination with
a few relevant extras.  The objective is to create a more intuitive
workflow where targeted buffer groups or types are always shown in a
given location, on the premise that predictability improves usability.

For each buffer action in =display-buffer-alist= we can define several
functions for selecting the appropriate window.  These are executed in
sequence, but my usage thus far suggests that a simpler method is just
as effective for my case.

Everything pertaining to buffer actions is documented at length in the
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html#Top][GNU Emacs Lisp Reference Manual]], currently corresponding to version
26.3.  Information can also be found via =C-h f display-buffer= and, for
my settings, =C-h f display-buffer-in-side-window=.

With regard to the contents of the =:bind= keyword of the =window= library,
most key combinations are complementary to the standard ones, such as
=C-x 1= becoming =s-1=, =C-x o= turning into =s-o= and the like.  They *do not
replace* the defaults: they just provide more convenient access to their
corresponding functions.  They all involve the Super key, following the
norms described in the [[#h:fbba4dea-9cc8-4e73-bffa-02aab10a6703][introductory note on the matter]].  Concerning the
=balance-windows-area= I find that it is less intrusive than the original
=balance-windows= normally bound to the same =C-x +=.

For a demo of the =display-buffer-alist= and the functions that
accompany it, watch my [[https://protesilaos.com/codelog/2020-01-07-emacs-display-buffer/][video on rules for buffer placement]]
(2020-01-07).

#+begin_src emacs-lisp
(use-package window
  :init
  (setq display-buffer-alist
        '(;; top side window
          (\"\\\\*elfeed-mpv-output.*\"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . -1))
          (\"\\\\*\\\\(Flycheck\\\\|Flymake\\\\|Package-Lint\\\\|vc-git :\\\\).*\"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . 0)
           (window-parameters . ((no-other-window . t))))
          (\"\\\\*Messages.*\"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . 1)
           (window-parameters . ((no-other-window . t))))
          (\"\\\\*\\\\(Backtrace\\\\|Warnings\\\\|Compile-Log\\\\)\\\\*\"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . 2)
           (window-parameters . ((no-other-window . t))))
          ;; bottom side window
          (\"\\\\*\\\\(Output\\\\|Register Preview\\\\).*\"
           (display-buffer-in-side-window)
           (window-width . 0.16)       ; See the :hook
           (side . bottom)
           (slot . -1)
           (window-parameters . ((no-other-window . t))))
          (\".*\\\\*\\\\(Completions\\\\|Embark Live Occur\\\\).*\"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . bottom)
           (slot . 0)
           (window-parameters . ((no-other-window . t))))
          (\"^\\\\(\\\\*e?shell\\\\|vterm\\\\).*\"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . bottom)
           (slot . 1))
          ;; left side window
          (\"\\\\*Help.*\"
           (display-buffer-in-side-window)
           (window-width . 0.20)       ; See the :hook
           (side . left)
           (slot . 0)
           (window-parameters . ((no-other-window . t))))
          ;; right side window
          (\"\\\\*Faces\\\\*\"
           (display-buffer-in-side-window)
           (window-width . 0.25)
           (side . right)
           (slot . 0)
           (window-parameters . ((no-other-window . t)
                                 (mode-line-format . (\" \"
                                                      mode-line-buffer-identification)))))
          (\"\\\\*Custom.*\"
           (display-buffer-in-side-window)
           (window-width . 0.25)
           (side . right)
           (slot . 1))
          ;; bottom buffer (NOT side window)
          (\"\\\\*\\\\vc-\\\\(incoming\\\\|outgoing\\\\).*\"
           (display-buffer-at-bottom))
          (\"\\\\*Embark Occur.*\"
           (display-buffer-at-bottom))))
  (setq window-combination-resize t)
  (setq even-window-sizes 'height-only)
  (setq window-sides-vertical nil)
  ;; Note that the the syntax for `use-package' hooks is controlled by
  ;; the `use-package-hook-name-suffix' variable.  The \"-hook\" suffix is
  ;; not an error of mine.
  :hook ((help-mode-hook . visual-line-mode)
        (custom-mode-hook . visual-line-mode))
  :bind ((\"s-n\" . next-buffer)
         (\"s-p\" . previous-buffer)
         (\"s-o\" . other-window)
         (\"s-2\" . split-window-below)
         (\"s-3\" . split-window-right)
         (\"s-0\" . delete-window)
         (\"s-1\" . delete-other-windows)
         (\"s-5\" . delete-frame)
         (\"C-x +\" . balance-windows-area)
         (\"s-q\" . window-toggle-side-windows)))

;; These are all experimental.  Just showcasing the power of passing
;; parameters to windows or frames.
(use-package emacs
  :commands (prot/window-dired-vc-root-left
             prot/make-frame-floating-with-current-buffer
             prot/display-buffer-at-bottom)
  :config
  (defun prot/window-dired-vc-root-left ()
    \"Open root directory of current version-controlled repository
or the present working directory with `dired' and bespoke window
parameters.  This is meant as a proof-of-concept function,
illustrating how to leverage window rules to display a buffer,
plus a few concomitant extras.\"
    (interactive)
    (let ((dir (if (eq (vc-root-dir) nil)
                   (dired-noselect default-directory)
                 (dired-noselect (vc-root-dir)))))
      (display-buffer-in-side-window
       dir `((side . left)
             (slot . -1)
             (window-width . 0.16)
             (window-parameters . ((no-other-window . t)
                                   (no-delete-other-windows . t)
                                   (mode-line-format . (\" \"
                                                        mode-line-buffer-identification))))))
      (with-current-buffer dir
        (rename-buffer \"*Dired-Side*\")
        (setq-local window-size-fixed 'width)))
    (with-eval-after-load 'ace-window
      (when (boundp 'aw-ignored-buffers)
        (add-to-list 'aw-ignored-buffers \"*Dired-Side*\"))))

  (defun prot/make-frame-floating-with-current-buffer ()
    \"Display the current buffer in a new floating frame.

This passes certain parameters to the newly created frame:

- use a different name than the default;
- use a graphical frame;
- do not display the minibuffer.

The name is meant to be used by the external rules of my tiling
window manager (BSPWM) to present the frame in a floating state.\"
    (interactive)
    (make-frame '((name . \"my_float_window\")
                  (window-system . x)
                  (minibuffer . nil))))

  (defun prot/display-buffer-at-bottom ()
    \"Move the current buffer to the bottom of the frame.  This is
useful to take a buffer out of a side window.

The window parameters of this function are provided mostly for
didactic purposes.\"
    (interactive)
    (let ((buffer (current-buffer)))
      (with-current-buffer buffer
        (delete-window)
        (display-buffer-at-bottom
         buffer `((window-parameters . ((mode-line-format . (\" \"
                                                             mode-line-buffer-identification))))))))))
#+end_src

*** Window history (winner-mode)
    :PROPERTIES:
    :CUSTOM_ID: h:6b4f7792-6ccd-45d5-b262-01d200639072
    :END:

Winner is a built-in tool that keeps a record of buffer and window
layout changes.  It then allows us to move back and forth in the
history of said changes.  I have it enabled by default, while I assign
its two main functions to Super and the right/left arrow keys.

#+begin_src emacs-lisp
(use-package winner
  :hook (after-init-hook . winner-mode)
  :bind (\"<s-right>\" . winner-redo)
         (\"<s-left>\" . winner-undo))
#+end_src

Windmove is also built into Emacs.  It provides functions for selecting
a window in any of the cardinal directions.  I use the Vim keys while
holding down Super and Meta because other mnemonics-based actions
involving just Super or Meta are already occupied.

*** Tabs for window layouts and buffers (Emacs 27.1)
    :PROPERTIES:
    :CUSTOM_ID: h:63ad472f-c9c2-40ad-9675-1dc529487788
    :END:

Starting with version 27.1, Emacs has built-in support for two distinct
concepts of \"tabs\":

1. Work spaces that contain windows in any given layout.
2. A list of buffers presented as buttons at the top of the window.

The former, represented by the =tab-bar= library, is best understood as
the equivalent of \"virtual desktops\", as these are used in most desktop
environments or window managers.

The latter, implemented in =tab-line=, is the same as the tabs you are
used to in web browsers.  Each buffer is assigned to a single tab.
Clicking on the tab takes you to the corresponding buffer.

I do not need the =tab-line= as I find such tabs to be inefficient at
scale.  Finding a buffer through search mechanisms is generally faster:
it does not matter whether you have ten or a hundred buffers on the list
(unless, of course, they all have similar names in which case you are in
trouble either way---do not forget to check my [[#h:06290f9c-491c-45b2-b213-0248f890c83d][Ibuffer settings]]).

On the other hand, the work spaces (=tab-bar=) are very useful for
organising the various applications that are running inside of Emacs.
You can, for example, have your current project on tab (workspace) 1,
your email and news reader on 2, music on 3, and so on.  Of course, this
can also be achieved by using separate frames for each of these, though
I generally prefer working in a single frame (plus you can define a
window configuration or frameset in a register---see [[#h:6bdfe4d1-f97a-4d89-ab68-e87448a95fea][relevant section]]).

For me tabs are useful as groups of buffers in a given window
configuration.  I do not want a persistent bar with buttons that
introduces extra visual clutter.  Switching to tabs is done through
completion, specifically =prot/icomplete-tab-bar-select-tab=.  This
extends the configurations in my [[#h:07e173ea-e7ed-4fc0-ba3c-e44b403359a7][minibuffer essentials and Icomplete]].
Otherwise, we can use =tab-switcher= which produces a buffer with the
entire list, plus a basic command for marking an item for deletion (same
principle as with, e.g., =dired=).

All settings I configure here are meant to work in accordance with this
abstract conception of \"tabs are work spaces\".  Here are the main key
chords for =tab-bar= (they will all work properly if you keep the mode
active):

| Key     | Description                       |
|---------+-----------------------------------|
| C-x t b | Open a buffer in a new tab        |
| C-x t d | Open a directory in a new tab     |
| C-x t f | Open a file in a new tab          |
| C-x t 0 | Close current tab                 |
| C-x t 1 | Close all other tabs              |
| C-x t 2 | Open current buffer in new tab    |

These are consistent with the standard commands for handling windows and
accessing buffers/files in the \"other window\" (the =C-x 4 KEY= pattern).
There is also a command for giving a name to the current tab, accessed
via =C-x t r=, though I find I do not use it.

#+begin_src emacs-lisp
(use-package tab-bar
  :config
  (setq tab-bar-close-button-show nil)
  (setq tab-bar-close-last-tab-choice 'tab-bar-mode-disable)
  (setq tab-bar-close-tab-select 'recent)
  (setq tab-bar-new-tab-choice t)
  (setq tab-bar-new-tab-to 'right)
  (setq tab-bar-position nil)
  (setq tab-bar-show nil)
  (setq tab-bar-tab-hints nil)
  (setq tab-bar-tab-name-function 'tab-bar-tab-name-all)

  (tab-bar-mode -1)
  (tab-bar-history-mode -1)

  (defun prot/icomplete-tab-bar-tab-dwim ()
    \"Do-What-I-Mean function for getting to a `tab-bar-mode' tab.
If no other tab exists, create one and switch to it.  If there is
one other tab (so two in total) switch to it without further
questions.  Else use completion to select the tab to switch to.\"
    (interactive)
    (let ((tabs (mapcar (lambda (tab)
                          (alist-get 'name tab))
                        (tab-bar--tabs-recent))))
      (cond ((eq tabs nil)
             (tab-new))
            ((eq (length tabs) 1)
             (tab-next))
            (t
             (icomplete-vertical-do ()
               (tab-bar-switch-to-tab
                (completing-read \"Select tab: \" tabs nil t)))))))

  :bind ((\"C-x t t\" . prot/icomplete-tab-bar-tab-dwim)
         (\"s-t\" . prot/icomplete-tab-bar-tab-dwim)
         (\"C-x t s\" . tab-switcher)))

;; This is only included as a reference.
(use-package tab-line
  :disabled
  :commands (tab-line-mode global-tab-line-mode)
  :config
  (global-tab-line-mode -1))
#+end_src

**** TODO tab-line for groups that make sense, such as EWW
     :PROPERTIES:
     :CUSTOM_ID: h:4ac5ffc4-98a5-4eac-89eb-561dd069dff5
     :END:
*** Directional window motions (windmove)
    :PROPERTIES:
    :CUSTOM_ID: h:230d96c8-a955-4b82-844d-9de9a1b7c531
    :END:

While =C-x o= (=other-window=) is very useful when working with two or three
windows, it can become tiresome.  Thankfully, Emacs comes with a
built-in package to move to a window in the given direction.  I bind the
cardinal directions to Super+Ctrl plus the Vim keys (heresy!), with
aliases for the arrows you find on a standard keyboard's number pad.

The =windmove-create-window= specifies what should happen when trying to
move past the edge of the frame.  The idea with this is to allow it to
create a new window with the contents of the current buffer.  I tried it
for a while but felt that the times it would interfere with my layout
where more than those it would actually speed up my workflow.

#+begin_src emacs-lisp
(use-package windmove
  :config
  (setq windmove-create-window nil)     ; Emacs 27.1
  :bind ((\"C-s-k\" . windmove-up)
         (\"C-s-l\" . windmove-right)
         (\"C-s-j\" . windmove-down)
         (\"C-s-h\" . windmove-left)
         ;; numpad keys clockwise: 8 6 2 4
         (\"<kp-up>\" . windmove-up)
         (\"<kp-right>\" . windmove-right)
         (\"<kp-down>\" . windmove-down)
         (\"<kp-left>\" . windmove-left)))
#+end_src

" 0 2 (face org-level-1 fontified t yank-handler (evil-yank-line-handler nil t)) 2 38 (face org-level-1 fontified t yank-handler (evil-yank-line-handler nil t)) 38 39 (fontified t yank-handler (evil-yank-line-handler nil t)) 39 40 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 40 42 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 42 80 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 80 499 (fontified t yank-handler (evil-yank-line-handler nil t)) 499 536 (fontified t yank-handler (evil-yank-line-handler nil t)) 536 833 (fontified t yank-handler (evil-yank-line-handler nil t)) 833 898 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/") help-echo "LINK: https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 898 899 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/") help-echo "LINK: https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 899 926 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/") help-echo "LINK: https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 926 927 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/") help-echo "LINK: https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 927 928 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/") help-echo "LINK: https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 928 929 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/") help-echo "LINK: https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t yank-handler (evil-yank-line-handler nil t)) 929 946 (fontified t yank-handler (evil-yank-line-handler nil t)) 946 1011 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1011 1012 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1012 1036 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1036 1040 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1040 1041 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1041 1042 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1042 1043 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t yank-handler (evil-yank-line-handler nil t)) 1043 1058 (fontified t yank-handler (evil-yank-line-handler nil t)) 1058 1060 (fontified t yank-handler (evil-yank-line-handler nil t)) 1060 1119 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-19-dired-narrow/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-19-dired-narrow/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1119 1120 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-19-dired-narrow/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-19-dired-narrow/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1120 1145 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-19-dired-narrow/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-19-dired-narrow/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1145 1146 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-19-dired-narrow/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-19-dired-narrow/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1146 1147 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-19-dired-narrow/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-19-dired-narrow/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1147 1148 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-09-19-dired-narrow/") help-echo "LINK: https://protesilaos.com/codelog/2019-09-19-dired-narrow/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t yank-handler (evil-yank-line-handler nil t)) 1148 1165 (fontified t yank-handler (evil-yank-line-handler nil t)) 1165 1229 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1229 1230 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1230 1269 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1269 1270 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1270 1271 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1271 1272 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t yank-handler (evil-yank-line-handler nil t)) 1272 1289 (fontified t yank-handler (evil-yank-line-handler nil t)) 1289 1353 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1353 1354 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1354 1390 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1390 1391 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1391 1392 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1392 1393 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t yank-handler (evil-yank-line-handler nil t)) 1393 1410 (fontified t yank-handler (evil-yank-line-handler nil t)) 1410 1474 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1474 1475 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1475 1522 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1522 1523 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1523 1524 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1524 1525 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/") help-echo "LINK: https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t yank-handler (evil-yank-line-handler nil t)) 1525 1542 (fontified t yank-handler (evil-yank-line-handler nil t)) 1542 1558 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/") help-echo "LINK: https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1558 1608 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/") help-echo "LINK: https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1608 1609 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/") help-echo "LINK: https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1609 1669 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/") help-echo "LINK: https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1669 1670 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/") help-echo "LINK: https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1670 1671 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/") help-echo "LINK: https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link fontified t yank-handler (evil-yank-line-handler nil t)) 1671 1672 (font-lock-multiline t htmlize-link (:uri "https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/") help-echo "LINK: https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link invisible org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t yank-handler (evil-yank-line-handler nil t)) 1672 1687 (fontified t yank-handler (evil-yank-line-handler nil t)) 1687 1688 (fontified t yank-handler (evil-yank-line-handler nil t)) 1688 1690 (face org-level-3 fontified t yank-handler (evil-yank-line-handler nil t)) 1690 1692 (face org-level-3 fontified t yank-handler (evil-yank-line-handler nil t)) 1692 1715 (face org-level-3 fontified t yank-handler (evil-yank-line-handler nil t)) 1715 1719 (fontified t yank-handler (evil-yank-line-handler nil t)) 1719 1731 (font-lock-fontified t face org-drawer fontified t yank-handler (evil-yank-line-handler nil t)) 1731 1735 (fontified t yank-handler (evil-yank-line-handler nil t)) 1735 1746 (face org-special-keyword fontified t yank-handler (evil-yank-line-handler nil t)) 1746 1747 (fontified t yank-handler (evil-yank-line-handler nil t)) 1747 1785 (face org-property-value fontified t yank-handler (evil-yank-line-handler nil t)) 1785 1789 (fontified t yank-handler (evil-yank-line-handler nil t)) 1789 1794 (font-lock-fontified t face org-drawer fontified t yank-handler (evil-yank-line-handler nil t)) 1794 2082 (fontified t yank-handler (evil-yank-line-handler nil t)) 2082 2086 (org-emphasis t font-lock-multiline t face (org-verbatim) fontified t yank-handler (evil-yank-line-handler nil t)) 2086 2187 (fontified t yank-handler (evil-yank-line-handler nil t)) 2187 2233 (fontified t yank-handler (evil-yank-line-handler nil t)) 2233 2303 (fontified t yank-handler (evil-yank-line-handler nil t)) 2303 2320 (org-emphasis t font-lock-multiline t face (org-verbatim) fontified t yank-handler (evil-yank-line-handler nil t)) 2320 2419 (fontified t yank-handler (evil-yank-line-handler nil t)) 2419 2423 (org-emphasis t font-lock-multiline t face (org-verbatim) fontified t yank-handler (evil-yank-line-handler nil t)) 2423 2447 (fontified t yank-handler (evil-yank-line-handler nil t)) 2447 2463 (org-emphasis t font-lock-multiline t face (org-verbatim) fontified t yank-handler (evil-yank-line-handler nil t)) 2463 2594 (fontified t yank-handler (evil-yank-line-handler nil t)) 2594 2597 (org-emphasis t font-lock-multiline t face (org-verbatim) fontified t yank-handler (evil-yank-line-handler nil t)) 2597 2733 (fontified t yank-handler (evil-yank-line-handler nil t)) 2733 2746 (fontified t yank-handler (evil-yank-line-handler nil t)) 2746 3246 (fontified t yank-handler (evil-yank-line-handler nil t)) 3246 3273 (fontified t yank-handler (evil-yank-line-handler nil t)) 3273 18788 (fontified nil yank-handler (evil-yank-line-handler nil t)) 18788 18789 (fontified t yank-handler (evil-yank-line-handler nil t)) 18789 18790 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 18790 18792 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 18792 18812 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 18812 18814 (fontified t yank-handler (evil-yank-line-handler nil t)) 18814 18816 (face org-level-3 fontified t yank-handler (evil-yank-line-handler nil t)) 18816 18818 (face org-level-3 fontified t yank-handler (evil-yank-line-handler nil t)) 18818 18842 (face org-level-3 fontified t yank-handler (evil-yank-line-handler nil t)) 18842 18847 (fontified t yank-handler (evil-yank-line-handler nil t)) 18847 18859 (font-lock-fontified t face org-drawer fontified t yank-handler (evil-yank-line-handler nil t)) 18859 18864 (fontified t yank-handler (evil-yank-line-handler nil t)) 18864 18875 (face org-special-keyword fontified t yank-handler (evil-yank-line-handler nil t)) 18875 18876 (fontified t yank-handler (evil-yank-line-handler nil t)) 18876 18914 (face org-property-value fontified t yank-handler (evil-yank-line-handler nil t)) 18914 18919 (fontified t yank-handler (evil-yank-line-handler nil t)) 18919 18924 (font-lock-fontified t face org-drawer fontified t yank-handler (evil-yank-line-handler nil t)) 18924 19139 (fontified t yank-handler (evil-yank-line-handler nil t)) 19139 19169 (org-emphasis t font-lock-multiline t face (org-verbatim) fontified t yank-handler (evil-yank-line-handler nil t)) 19169 19288 (fontified t yank-handler (evil-yank-line-handler nil t)) 19288 19314 (fontified t yank-handler (evil-yank-line-handler nil t)) 19314 28220 (fontified nil yank-handler (evil-yank-line-handler nil t)) 28220 28221 (fontified t yank-handler (evil-yank-line-handler nil t)) 28221 28222 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 28222 28224 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 28224 28244 (face org-level-2 fontified t yank-handler (evil-yank-line-handler nil t)) 28244 28720 (fontified t yank-handler (evil-yank-line-handler nil t)) 28720 28773 (fontified t yank-handler (evil-yank-line-handler nil t)) 28773 44562 (fontified nil yank-handler (evil-yank-line-handler nil t)) 44562 44563 (fontified t yank-handler (evil-yank-line-handler nil t))) #("** pdf org
#+begin_src emacs-lisp

   (use-package org-pdfview
         :ensure t
	 :config 
		 (add-to-list 'org-file-apps
		 '(\"\\\\.pdf\\\\'\" . (lambda (file link)
		 (org-pdfview-open link)))))

  (defhydra hydra-pdftools (:color blue :hint nil)
	  \"
									╭───────────┐
	 Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
     ╭──────────────────────────────────────────────────────────────────┴───────────╯
	   ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
	   ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
	   ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
	   ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
      _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
	   ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
	   ^^_n_^^      ^ ^  _r_eset slice box
	   ^^^↓^^^
	   ^^_G_^^
     --------------------------------------------------------------------------------
	  \"
	  (\"\\\\\" hydra-master/body \"back\")
	  (\"<ESC>\" nil \"quit\")
	  (\"al\" pdf-annot-list-annotations)
	  (\"ad\" pdf-annot-delete)
	  (\"aa\" pdf-annot-attachment-dired)
	  (\"am\" pdf-annot-add-markup-annotation)
	  (\"at\" pdf-annot-add-text-annotation)
	  (\"y\"  pdf-view-kill-ring-save)
	  (\"+\" pdf-view-enlarge :color red)
	  (\"-\" pdf-view-shrink :color red)
	  (\"0\" pdf-view-scale-reset)
	  (\"H\" pdf-view-fit-height-to-window)
	  (\"W\" pdf-view-fit-width-to-window)
	  (\"P\" pdf-view-fit-page-to-window)
	  (\"n\" pdf-view-next-page-command :color red)
	  (\"p\" pdf-view-previous-page-command :color red)
	  (\"d\" pdf-view-dark-minor-mode)
	  (\"b\" pdf-view-set-slice-from-bounding-box)
	  (\"r\" pdf-view-reset-slice)
	  (\"g\" pdf-view-first-page)
	  (\"G\" pdf-view-last-page)
	  (\"e\" pdf-view-goto-page)
	  (\"o\" pdf-outline)
	  (\"s\" pdf-occur)
	  (\"i\" pdf-misc-display-metadata)
	  (\"u\" pdf-view-revert-buffer)
	  (\"F\" pdf-links-action-perfom)
	  (\"f\" pdf-links-isearch-link)
	  (\"B\" pdf-history-backward :color red)
	  (\"N\" pdf-history-forward :color red)
	  (\"l\" image-forward-hscroll :color red)
	  (\"h\" image-backward-hscroll :color red))
#+end_src
" 0 1 (yank-handler (evil-yank-line-handler nil t) fontified t face org-level-2) 1 3 (yank-handler (evil-yank-line-handler nil t) fontified t face org-level-2) 3 6 (yank-handler (evil-yank-line-handler nil t) fontified t face org-level-2) 6 10 (yank-handler (evil-yank-line-handler nil t) fontified t face org-level-2) 10 11 (yank-handler (evil-yank-line-handler nil t) fontified t) 11 33 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 33 34 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil font-lock-multiline t face org-block-begin-line) 34 39 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 39 50 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 50 51 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 51 62 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 62 63 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 63 72 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 72 79 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 79 80 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 80 84 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 84 91 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 91 129 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 129 140 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 140 144 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 144 150 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 150 223 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 223 229 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 229 235 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 235 240 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 240 249 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 249 456 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 456 459 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-string-face org-block)) 459 470 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 470 473 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-string-face org-block)) 473 510 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 510 560 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 560 563 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-string-face org-block)) 563 574 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 574 577 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-string-face org-block)) 577 580 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 580 624 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 624 655 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 655 658 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-string-face org-block)) 658 802 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 802 805 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-string-face org-block)) 805 815 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 815 818 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-string-face org-block)) 818 820 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 820 823 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-string-face org-block)) 823 827 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 827 830 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-string-face org-block)) 830 834 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 834 837 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-string-face org-block)) 837 841 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 841 844 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-string-face org-block)) 844 1074 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1074 1079 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1079 1083 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1083 1102 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1102 1108 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1108 1114 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1114 1121 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1121 1126 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1126 1132 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1132 1138 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1138 1142 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1142 1175 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1175 1179 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1179 1202 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1202 1206 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1206 1239 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1239 1243 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1243 1281 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1281 1285 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1285 1321 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1321 1324 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1324 1355 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1355 1358 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1358 1376 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1376 1382 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1382 1392 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1392 1395 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1395 1412 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1412 1418 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1418 1428 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1428 1431 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1431 1458 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1458 1461 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1461 1497 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1497 1500 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1500 1535 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1535 1538 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1538 1572 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1572 1575 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1575 1603 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1603 1609 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1609 1619 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1619 1622 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1622 1654 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1654 1660 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 1660 1670 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1670 1673 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1673 1704 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1704 1707 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1707 1750 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1750 1753 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1753 1780 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1780 1783 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1783 1809 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1809 1812 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1812 1837 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1837 1840 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1840 1865 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1865 1868 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1868 1886 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1886 1889 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1889 1905 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1905 1908 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1908 1940 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1940 1943 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1943 1972 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1972 1975 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1975 2005 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2005 2008 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2008 2037 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2037 2040 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2040 2062 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2062 2068 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 2068 2078 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2078 2081 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2081 2102 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2102 2108 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 2108 2118 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2118 2121 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2121 2144 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2144 2150 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 2150 2160 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2160 2163 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2163 2187 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2187 2193 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 2193 2200 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2200 2209 (yank-handler (evil-yank-line-handler nil t) fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 2209 2210 (yank-handler (evil-yank-line-handler nil t) fontified t face org-block-end-line)) "" "" #("g" 0 1 (fontified t)) #(" org" 0 4 (face org-level-2 fontified t)) #("         (\"r\"  . pdf-view-reset-slice))) 
" 0 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 13 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 13 29 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 29 39 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 39 41 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 41 42 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("         (\"b\"  . pdf-view-set-slice-from-bounding-box)
" 0 6 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 6 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 13 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 13 43 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 43 54 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 54 55 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("         (\"s\"  . pdf-occur)
" 0 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 13 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 13 27 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 27 28 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("         (\"i\"  . pdf-misc-display-metadata)
" 0 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 13 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 13 37 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 37 43 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 43 44 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("         (\"y\"  . pdf-view-kill-ring-save)
" 0 2 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 2 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 13 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 13 39 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 39 41 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 41 42 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("         (\"at\" . pdf-annot-add-text-annotation)
" 0 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 12 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 12 14 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 14 47 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 47 48 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("         (\"am\" . pdf-annot-add-markup-annotation)
" 0 4 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 4 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 14 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 14 49 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 49 50 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("         (\"aa\" . pdf-annot-attachment-dired)
" 0 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 11 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 11 14 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 14 44 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 44 45 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("         (\"ad\" . pdf-annot-delete)
" 0 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 13 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 13 14 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 14 34 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 34 35 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("         (\"al\" . pdf-annot-list-annotations)
" 0 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 11 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 11 14 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 14 44 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 44 45 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("         (\"u\"  . pdf-view-revert-buffer)
" 0 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 13 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 13 20 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 20 40 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 40 41 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t))) #("         (\"e\"  . pdf-view-goto-page)
" 0 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 10 13 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 13 36 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)) 36 37 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t yank-handler (evil-yank-line-handler nil t)))))
(setq regexp-search-ring 'nil)
(setq search-ring '(#("b" 0 1 (isearch-regexp-function nil isearch-case-fold-search t)) #("hide" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("ereader" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("erea" 0 4 (isearch-regexp-function nil isearch-case-fold-search t)) #("mutool" 0 6 (isearch-regexp-function nil isearch-case-fold-search t))))
